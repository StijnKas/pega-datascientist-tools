pdstools.decision_analyzer.plots
================================

.. py:module:: pdstools.decision_analyzer.plots


Classes
-------

.. autoapisummary::

   pdstools.decision_analyzer.plots.Plot


Functions
---------

.. autoapisummary::

   pdstools.decision_analyzer.plots.plot_offer_quality_piecharts
   pdstools.decision_analyzer.plots.getTrendChart
   pdstools.decision_analyzer.plots.plot_value_distribution


Module Contents
---------------

.. py:class:: Plot(decision_data)

   .. py:method:: plot_threshold_deciles(thresholding_name, return_df=False)


   .. py:method:: plot_distribution_as_treemap(df: polars.LazyFrame, stage: str, scope_options: List[str])


   .. py:method:: plot_sensitivity(win_rank: int = 1, hide_priority=True, limit_xaxis_range=True, return_df=False, reference_group=None)


   .. py:method:: plot_global_winloss_distribution(level, win_rank, return_df=False)


   .. py:method:: plot_propensity_vs_optionality(stage='Arbitration', return_df=False)


   .. py:method:: plot_action_variation(stage='Final', return_df=False)


   .. py:method:: plot_trend_chart(stage: str, scope: str, return_df=False) -> Tuple[plotly.graph_objects.Figure, Optional[str]]


   .. py:method:: plot_decision_funnel(scope: str, NBADStages_Mapping: dict, additional_filters: Optional[Union[polars.Expr, List[polars.Expr]]] = None, return_df=False)


   .. py:method:: plot_filtering_components(stages: List[str], top_n, AvailableNBADStages, additional_filters: Optional[Union[polars.Expr, List[polars.Expr]]] = None, return_df=False)


   .. py:method:: plot_distribution(df: polars.LazyFrame, scope: str, breakdown: str, metric: str = 'Decisions', horizontal=False)


   .. py:method:: plot_prio_factor_boxplots(reference: Optional[Union[polars.Expr, List[polars.Expr]]] = None, sample_size=10000, return_df=False) -> Tuple[plotly.graph_objects.Figure, Optional[str]]


   .. py:method:: plot_rank_boxplot(reference: Optional[Union[polars.Expr, List[polars.Expr]]] = None, return_df=False)


   .. py:method:: plot_optionality_per_stage(return_df=False)


   .. py:method:: plot_optionality_trend(df: polars.LazyFrame, NBADStages_Mapping, return_df=False)


.. py:function:: plot_offer_quality_piecharts(df: polars.LazyFrame, propensityTH, NBADStages_FilterView, NBADStages_Mapping, return_df=False)

.. py:function:: getTrendChart(df: polars.LazyFrame, stage: str = 'Final', return_df=False)

.. py:function:: plot_value_distribution(value_data: polars.LazyFrame, scope: str)

