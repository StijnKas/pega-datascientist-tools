pdstools.utils.streamlit_utils
==============================

.. py:module:: pdstools.utils.streamlit_utils


Functions
---------

.. autoapisummary::

   pdstools.utils.streamlit_utils.cachedSample
   pdstools.utils.streamlit_utils.cachedDatamart
   pdstools.utils.streamlit_utils.import_datamart
   pdstools.utils.streamlit_utils.fromUploadedFile
   pdstools.utils.streamlit_utils.fromFilePath
   pdstools.utils.streamlit_utils.model_selection_df
   pdstools.utils.streamlit_utils.filter_dataframe
   pdstools.utils.streamlit_utils.model_and_row_counts
   pdstools.utils.streamlit_utils.configure_predictor_categorization
   pdstools.utils.streamlit_utils.convert_df
   pdstools.utils.streamlit_utils.st_get_latest_pdstools_version


Module Contents
---------------

.. py:function:: cachedSample()

.. py:function:: cachedDatamart(*args, **kwargs)

.. py:function:: import_datamart(**opts)

.. py:function:: fromUploadedFile(**opts)

.. py:function:: fromFilePath(**opts)

.. py:function:: model_selection_df(df: polars.LazyFrame, context_keys: list)

.. py:function:: filter_dataframe(df: polars.LazyFrame, schema: Optional[dict] = None, queries=[]) -> polars.LazyFrame

   Adds a UI on top of a dataframe to let viewers filter columns

   :param df: Original dataframe
   :type df: pl.DataFrame

   :returns: The filtered LazyFrame
   :rtype: pl.LazyFrame


.. py:function:: model_and_row_counts(df: pdstools.utils.types.any_frame)

   Returns unique model id count and row count from a dataframe

   :param df: The input dataframe
   :type df: Union[pl.DataFrame, pl.LazyFrame]

   :returns: unique model count
             row count
   :rtype: Tuple[int, int]


.. py:function:: configure_predictor_categorization()

.. py:function:: convert_df(df)

.. py:function:: st_get_latest_pdstools_version()

