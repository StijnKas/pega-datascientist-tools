{
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# ADM Explained\n",
                "\n",
                "__Pega__\n",
                "\n",
                "__2023-03-15__\n",
                "\n",
                "# ADM Model Report Explained\n",
                "\n",
                "This notebook shows exactly how all the values in an ADM model report\n",
                "are calculated. It also shows how the propensity is calculated for a\n",
                "particular customer.\n",
                "\n",
                "We use one of the shipped datamart exports for the example. This is a\n",
                "model very similar to one used in some of the ADM PowerPoint/Excel deep\n",
                "dive examples. You can change this notebook to apply to your own data.\n",
                "\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "nbsphinx": "hidden"
            },
            "outputs": [],
            "source": [
                "# These lines are only for rendering in the docs, and are hidden through Jupyter tags\n",
                "# Do not run if you're running the notebook seperately\n",
                "\n",
                "import plotly.io as pio\n",
                "from math import log\n",
                "\n",
                "pio.renderers.default = \"notebook_connected\"\n",
                "\n",
                "import sys\n",
                "\n",
                "sys.path.append(\"../../../\")\n",
                "import pandas as pd\n",
                "pd.set_option('display.max_colwidth', 0)\n",
                "\n",
                "format_binning_derived = {'Positives':'{:.0f}', 'Negatives':'{:.0f}', 'Responses %':'{:.2f}', 'Positives %':'{:.2f}', 'Negatives %':'{:.2f}', 'Propensity':'{:.4f}'}\n",
                "format_lift = {'Positives': '{:.0f}', 'Negatives': '{:.0f}', 'Lift': '{:.4f}'}\n",
                "format_z_ratio = {'Positives':'{:.0f}', 'Negatives':'{:.0f}', 'Positives %':'{:.2f}', 'Negatives %':'{:.2f}', 'ZRatio':'{:.4f}'}\n",
                "format_log_odds = {'Positives':'{:.0f}', 'Negatives':'{:.0f}', 'Positives %':'{:.2f}', 'LogOdds %':'{:.4f}', 'ModifiedLogOdds':'{:.4f}'}\n",
                "format_classifier = {'Positives':'{:.0f}', 'Negatives':'{:.0f}'}"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "import polars as pl\n",
                "import numpy as np\n",
                "from plotly.subplots import make_subplots\n",
                "import plotly.graph_objects as go\n",
                "import plotly.express as px\n",
                "from typing import List\n",
                "\n",
                "from pdstools import datasets, cdh_utils\n",
                "from pdstools.plots.plots_plotly import ADMVisualisations\n",
                "\n",
                "\n",
                "pl.Config.set_fmt_str_lengths(100);"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "For the example we use one particular model: *AutoNew36Months* over\n",
                "*SMS*. You can use your own data and select a different model.\n",
                "\n",
                "To explain the ADM model report, we use one of the *IH* predictors as an\n",
                "example. Swap for any other predictor when using different data."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "dm = datasets.CDHSample(subset=False)\n",
                "\n",
                "model = dm.combinedData.filter(\n",
                "    (pl.col(\"Name\") == \"AutoNew36Months\") & (pl.col(\"Channel\") == \"SMS\")\n",
                ")\n",
                "\n",
                "modelpredictors = (\n",
                "    dm.combinedData.join(\n",
                "        model.select(pl.col(\"ModelID\").unique()), on=\"ModelID\", how=\"inner\"\n",
                "    )\n",
                "    .filter(pl.col(\"EntryType\") != \"Inactive\")\n",
                "    .with_columns(Action=pl.concat_str([\"Issue\", \"Group\"], separator=\"/\"),\n",
                "                  PredictorName=pl.col(\"PredictorName\").cast(pl.Utf8))\n",
                "    .collect()\n",
                ")\n",
                "\n",
                "predictorbinning = modelpredictors.filter(\n",
                "    pl.col(\"PredictorName\") == \"IH.SMS.Outbound.Accepted.pyHistoricalOutcomeCount\"\n",
                ").sort(\"BinIndex\")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Model Overview"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The selected model is shown below. Only the currently active predictors are used for the propensity calculation, so only showing those.\n",
                "\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "modelpredictors.select(\n",
                "    pl.col(\"Action\").unique(),\n",
                "    pl.col(\"Channel\").unique(),\n",
                "    pl.col(\"Name\").unique(),\n",
                "    pl.col(\"PredictorName\").unique().sort().implode().alias(\"Active Predictors\"),\n",
                "    (pl.col(\"Performance\").unique() * 100).alias(\"Model Performance (AUC)\"),\n",
                ").to_pandas().T.set_axis([\"Values\"], axis=1)\n"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Predictor binning for IH.SMS.Outbound.Accepted.pyHistoricalOutcomeCount\n"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The ADM model report will show predictor binning similar to this, with all displayed data coming from fields in the ADM data mart. In subsequent sections weâ€™ll show how all the data is derived from the number of positives and negatives in each of the bins.\n",
                "\n"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": []
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "predictorbinning.groupby(\"PredictorName\").agg(\n",
                "    pl.first(\"ResponseCount\").cast(pl.Int16).alias(\"# Responses\"),\n",
                "    pl.n_unique(\"BinIndex\").alias(\"# Bins\"),\n",
                "    (pl.first(\"PerformanceBin\") * 100).alias(\"Predictor Performance(AUC)\"),\n",
                ").rename({\"PredictorName\": \"Predictor Name\"}).transpose(include_header=True).rename(\n",
                "    {\"column\": \"\", \"column_0\": \"Value\"}\n",
                ").to_pandas().set_index(\"\")\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "BinPositives = pl.col(\"BinPositives\")\n",
                "BinNegatives = pl.col(\"BinNegatives\")\n",
                "sumPositives = pl.sum(\"BinPositives\")\n",
                "sumNegatives = pl.sum(\"BinNegatives\")\n",
                "\n",
                "# TODO: add totals for first 5 columns, base rate for 6 and 0,1, see R version\n",
                "\n",
                "predictorbinning.select(\n",
                "    pl.col(\"BinSymbol\").alias(\"Range/Symbol\"),\n",
                "    ((BinPositives + BinNegatives) / (sumPositives + sumNegatives))\n",
                "    .round(3)\n",
                "    .alias(\"Responses (%)\"),\n",
                "    BinPositives.alias(\"Positives\"),\n",
                "    (BinPositives / sumPositives).round(3).alias(\"Positives (%)\"),\n",
                "    BinNegatives.alias(\"Negatives\"),\n",
                "    (BinNegatives / sumNegatives).round(3).alias(\"Negatives (%)\"),\n",
                "    (BinPositives / (BinPositives + BinNegatives)).round(4).alias(\"Propensity (%)\"),\n",
                "    pl.col(\"ZRatio\"),\n",
                "    pl.col(\"Lift\"),\n",
                ").to_pandas().set_index(\"Range/Symbol\")\n"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Bin Statistics"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Positive and Negative ratios"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Internally, ADM only keeps track of the total counts of positive and negative responses in each bin. Everything else is derived from those numbers. The percentages and totals are trivially derived, and the propensity is just the number of positives divided by the total. The numbers calculated here match the numbers from the datamart table exactly."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "binningDerived = predictorbinning.select(\n",
                "    pl.col(\"BinSymbol\").alias(\"Range/Symbol\"),\n",
                "    BinPositives.alias(\"Positives\"),\n",
                "    BinNegatives.alias(\"Negatives\"),\n",
                "    (((BinPositives + BinNegatives) / (sumPositives + sumNegatives)) * 100)\n",
                "    .round(2)\n",
                "    .alias(\"Responses %\"),\n",
                "    ((BinPositives / sumPositives) * 100).round(2).alias(\"Positives %\"),\n",
                "    ((BinNegatives / sumNegatives) * 100).round(2).alias(\"Negatives %\"),\n",
                "    (BinPositives / (BinPositives + BinNegatives)).round(4).alias(\"Propensity\"),\n",
                ")\n",
                "binningDerived.to_pandas(use_pyarrow_extension_array=True).set_index(\"Range/Symbol\").style.format(\n",
                "    format_binning_derived\n",
                ").set_properties(\n",
                "    color=\"#0000FF\", subset=[\"Responses %\", \"Positives %\", \"Negatives %\", \"Propensity\"]\n",
                ")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Lift"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Lift is the ratio of the propensity in a particular bin over the average propensity. So a value of 1 is the average, larger than 1 means higher propensity, smaller means lower propensity:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "Positives = pl.col(\"Positives\")\n",
                "Negatives = pl.col(\"Negatives\")\n",
                "sumPositives = pl.sum(\"Positives\")\n",
                "sumNegatives = pl.sum(\"Negatives\")\n",
                "binningDerived.select(\n",
                "    \"Range/Symbol\",\n",
                "    \"Positives\",\n",
                "    \"Negatives\",\n",
                "    (\n",
                "        (Positives / (Positives + Negatives))\n",
                "        / (sumPositives / (Positives + Negatives).sum())\n",
                "    ).alias(\"Lift\"),\n",
                ").to_pandas().set_index(\"Range/Symbol\").style.format(format_lift).set_properties(\n",
                "    **{\"color\": \"blue\"}, subset=[\"Lift\"]\n",
                ")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Z-Ratio"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The Z-Ratio is also a measure of the how the propensity in a bin differs from the average, but takes into account the size of the bin and thus is statistically more relevant. It represents the number of standard deviations from the average, so centers around 0. The wider the spread, the better the predictor is.\n",
                "$$\\frac{posFraction-negFraction}{\\sqrt(\\frac{posFraction*(1-posFraction)}{\\sum positives}+\\frac{negFraction*(1-negFraction)}{\\sum negatives})}$$ \n",
                "\n",
                "See the calculation here, which is also included in [cdh_utils' zRatio()](https://pegasystems.github.io/pega-datascientist-tools/Python/autoapi/pdstools/utils/cdh_utils/index.html#pdstools.utils.cdh_utils.zRatio)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "def zRatio(\n",
                "    posCol: pl.Expr = pl.col(\"BinPositives\"), negCol: pl.Expr = pl.col(\"BinNegatives\")\n",
                ") -> pl.Expr:\n",
                "    def getFracs(posCol=pl.col(\"BinPositives\"), negCol=pl.col(\"BinNegatives\")):\n",
                "        return posCol / posCol.sum(), negCol / negCol.sum()\n",
                "\n",
                "    def zRatioimpl(\n",
                "        posFractionCol=pl.col(\"posFraction\"),\n",
                "        negFractionCol=pl.col(\"negFraction\"),\n",
                "        PositivesCol=pl.sum(\"BinPositives\"),\n",
                "        NegativesCol=pl.sum(\"BinNegatives\"),\n",
                "    ):\n",
                "        return (\n",
                "            (posFractionCol - negFractionCol)\n",
                "            / (\n",
                "                (posFractionCol * (1 - posFractionCol) / PositivesCol)\n",
                "                + (negFractionCol * (1 - negFractionCol) / NegativesCol)\n",
                "            ).sqrt()\n",
                "        ).alias(\"ZRatio\")\n",
                "\n",
                "    return zRatioimpl(*getFracs(posCol, negCol), posCol.sum(), negCol.sum())\n",
                "\n",
                "\n",
                "binningDerived.select(\n",
                "    \"Range/Symbol\", \"Positives\", \"Negatives\", \"Positives %\", \"Negatives %\"\n",
                ").with_columns(zRatio(Positives, Negatives)).to_pandas().set_index(\"Range/Symbol\").style.format(\n",
                "    format_z_ratio\n",
                ").set_properties(\n",
                "    **{\"color\": \"blue\"}, subset=[\"ZRatio\"]\n",
                ")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Predictor AUC\n"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The predictor AUC is the univariate performance of this predictor against the outcome. This too can be derived from the positives and negatives and\n",
                "there is  a convenient function in pdstools to calculate it directly from the positives and negatives.\n",
                "\n",
                "This function is implemented in cdh_utils: [`cdh_utils.auc_from_bincounts()`](https://pegasystems.github.io/pega-datascientist-tools/Python/autoapi/pdstools/utils/cdh_utils/index.html#pdstools.utils.cdh_utils.auc_from_bincounts)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "pos=binningDerived.get_column(\"Positives\").to_numpy()\n",
                "neg=binningDerived.get_column(\"Negatives\").to_numpy()\n",
                "\n",
                "# TODO why are we not using the PDS tools function here\n",
                "\n",
                "o = np.argsort((pos / (pos + neg)))\n",
                "\n",
                "TNR = np.cumsum(neg[o]) / np.sum(neg)\n",
                "FPR = np.flip(np.cumsum(neg[o]) / np.sum(neg), axis=0)\n",
                "TPR = np.flip(np.cumsum(pos[o]) / np.sum(pos), axis=0)\n",
                "Area = (FPR - np.append(FPR[1:], 0)) * (TPR + np.append(TPR[1:], 0)) / 2\n",
                "auc = 0.5 + np.abs(0.5-np.sum(Area))\n",
                "\n",
                "fig = px.line(\n",
                "    x=TPR, y=TNR,\n",
                "    labels=dict(x='Specificity', y='Sensitivity'),\n",
                "    title = f\"AUC = {auc.round(3)}\",\n",
                "    width=700, height=700,\n",
                "    range_x=[1,0],\n",
                "    template='none'\n",
                ")\n",
                "fig.add_shape(\n",
                "    type='line', line=dict(dash='dash'),\n",
                "    x0=1, x1=0, y0=0, y1=1\n",
                ")\n",
                "fig.show()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Predictor score and log odds"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The score is calculated from the log odds which are simply the ratio of\n",
                "the probabilities of positives and negatives. For the actual calculation\n",
                "in ADM this is modified slightly to avoid division-by-zero problems and\n",
                "to avoid numeric instability issues.\n",
                "\n",
                "The contribution of an active predictor $p$ for bin $i$ with the number\n",
                "of positive and negative responses in $Positives_i$ and $Negatives_i$:\n",
                "\n",
                "$$contribution_p = \\log(Positives_i+\\frac{1}{nBins}) - \\log(Negatives_i+\\frac{1}{nBins}) - \\log(1+\\sum_i{Positives_i}) + \\log(1+\\sum_i{Negatives_i})$$"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "N = binningDerived.shape[0]\n",
                "binningDerived.with_columns(\n",
                "    LogOdds=(pl.col(\"Positives %\") / pl.col(\"Negatives %\")).log(),\n",
                "    ModifiedLogOdds=(\n",
                "        ((Positives + 1 / N).log() - (Positives.sum() + 1).log())\n",
                "        - ((Negatives + 1 / N).log() - (Negatives.sum() + 1).log())\n",
                "    ),\n",
                ").drop(\"Responses %\", \"Propensity\").to_pandas().set_index(\"Range/Symbol\").style.format(\n",
                "    format_log_odds\n",
                ").set_properties(\n",
                "    **{\"color\": \"blue\"}, subset=[\"LogOdds\", \"ModifiedLogOdds\"]\n",
                ")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Propensity mapping"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Log odds contribution for all the predictors"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The final score is loosely referred to as \"the average contribution\" but\n",
                "in fact is a little more nuanced. The final score is calculated as:\n",
                "\n",
                "$$score = \\frac{\\log(1 + TotalPositives) â€“ \\log(1 + TotalNegatives) + \\sum_p contribution_p}{1 + nActivePredictors}$$\n",
                "\n",
                "Here, $TotalPositives$ and $TotalNegatives$ are the total number of\n",
                "positive and negative responses to the model.\n",
                "\n",
                "Below an example. From all the active predictors of the model \n",
                "we pick a value (in the middle for numerics, first symbol\n",
                "for symbolics) and show the (modified) log odds. The final score is\n",
                "calculated per the above formula, and this is the value that is mapped\n",
                "to a propensity value by the classifier (which is constructed using the\n",
                "[PAV(A)](https://en.wikipedia.org/wiki/Isotonic_regression) algorithm).\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "def middleBin():\n",
                "    return pl.col(\"BinIndex\") == (pl.max(\"BinIndex\") / 2).floor().cast(pl.UInt32)\n",
                "\n",
                "def RowWiseLogOdds(Bin, Positives, Negatives):\n",
                "    Bin, N = Bin.list.get(0) - 1, Positives.list.lengths()\n",
                "    Pos, Neg = Positives.list.get(Bin), Negatives.list.get(Bin)\n",
                "    PosSum, NegSum = Positives.list.sum(), Negatives.list.sum()\n",
                "    return (\n",
                "        (((Pos + (1 / N)).log() - (PosSum + 1).log()))\n",
                "        - (((Neg + (1 / N)).log()) - (NegSum + 1).log())\n",
                "    ).alias(\"Modified Log odds\")\n",
                "\n",
                "df = (\n",
                "    modelpredictors.filter(pl.col(\"PredictorName\") != \"Classifier\")\n",
                "    .groupby(\"PredictorName\")\n",
                "    .agg(\n",
                "        Value=pl.when(pl.col(\"Type\").first() == \"numeric\")\n",
                "        .then(\n",
                "            ((pl.col(\"BinLowerBound\") + pl.col(\"BinUpperBound\")) / 2).where(middleBin())\n",
                "        )\n",
                "        .otherwise(pl.col(\"BinSymbol\").str.split(\",\").list.first().where(middleBin())),\n",
                "        Bin=pl.col(\"BinIndex\").where(middleBin()),\n",
                "        Positives=pl.col(\"BinPositives\"),\n",
                "        Negatives=pl.col(\"BinNegatives\"),\n",
                "    )\n",
                "    .with_columns(\n",
                "        pl.col([\"Positives\", \"Negatives\"]).list.get(pl.col(\"Bin\").list.get(0) - 1),\n",
                "        pl.col(\"Bin\", \"Value\").list.get(0),\n",
                "        LogOdds=RowWiseLogOdds(pl.col(\"Bin\"), pl.col(\"Positives\"), pl.col(\"Negatives\")),\n",
                "    )\n",
                "    .sort(\"PredictorName\")\n",
                ")\n",
                "\n",
                "classifier = (\n",
                "    modelpredictors.filter(pl.col(\"EntryType\") == \"Classifier\")\n",
                "    .with_columns(\n",
                "        Propensity=(BinPositives / (BinPositives / BinNegatives)),\n",
                "        AdjustedPropensity=((0.5 + BinPositives) / (1 + BinPositives + BinNegatives)),\n",
                "    )\n",
                "    .select(\n",
                "        [\n",
                "            pl.col(\"BinIndex\").alias(\"Index\"),\n",
                "            pl.col(\"BinSymbol\").alias(\"Bin\"),\n",
                "            BinPositives.alias(\"Positives\"),\n",
                "            BinNegatives.alias(\"Negatives\"),\n",
                "            ((pl.cumsum(\"BinResponseCount\") / pl.sum(\"BinResponseCount\")) * 100).alias(\n",
                "                \"Cum. Total (%)\"\n",
                "            ),\n",
                "            (pl.col(\"BinPropensity\") * 100).alias(\"Propensity (%)\"),\n",
                "            (pl.col(\"AdjustedPropensity\") * 100).alias(\"Adjusted Propensity (%)\"),\n",
                "            ((pl.cumsum(\"BinPositives\") / pl.sum(\"BinPositives\")) * 100).alias(\n",
                "                \"Cum Positives (%)\"\n",
                "            ),\n",
                "            pl.col(\"ZRatio\"),\n",
                "            (pl.col(\"Lift\") * 100).alias(\"Lift(%)\"),\n",
                "            pl.col(\"BinResponseCount\").alias(\"Responses\"),\n",
                "        ]\n",
                "    )\n",
                ")\n",
                "classifierLogOffset = log(1+classifier[\"Positives\"].sum()) - log(1+classifier[\"Negatives\"].sum())\n",
                "\n",
                "propensity_mapping = df.vstack(\n",
                "    pl.DataFrame(dict(zip(\n",
                "                df.columns,\n",
                "                [\"Final Score\"] + [None] * 4 + [(df[\"LogOdds\"].sum()+classifierLogOffset) / (len(df)+1)],\n",
                "                )),\n",
                "    schema=df.schema,\n",
                "    )\n",
                ").to_pandas().set_index(\"PredictorName\").style.set_properties(**{'color': 'blue'}, subset=[\"LogOdds\"])\n",
                "\n",
                "propensity_mapping"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Classifier"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The success rate is defined as $\\frac{positives}{positives+negatives}$ per bin. \n",
                "\n",
                "The adjusted propensity that is returned is a small modification (Laplace smoothing) to this and calculated as $\\frac{0.5+positives}{1+positives+negatives}$ so empty models return a propensity of 0.5.\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "# TODO see if we can port the \"getActiveRanges\" code to python so to highlight the classifier rows that are \"active\"\n",
                "\n",
                "classifier.drop(\"Responses\").to_pandas().set_index(\"Index\").style.format(format_classifier).set_properties(\n",
                "    **{\"color\": \"blue\"}, subset=[\"Adjusted Propensity (%)\"]\n",
                ")"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Final Propensity"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Below the classifier mapping. On the x-axis the binned scores (log odds values), on the y-axis the Propensity. Note the returned propensities are following a slightly adjusted formula, see the table above. The bin that contains the calculated final score is highlighted."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "tags": [
                    "remove_input"
                ]
            },
            "outputs": [],
            "source": [
                "score = propensity_mapping.data.iloc[propensity_mapping.data.shape[0]-1][\"LogOdds\"]\n",
                "score_bin = modelpredictors.filter(pl.col(\"EntryType\") == \"Classifier\").select(\n",
                "    pl.col(\"BinSymbol\").where(\n",
                "        (pl.col(\"BinLowerBound\") < score) & (pl.col(\"BinUpperBound\") > score)\n",
                "    )\n",
                ")[\"BinSymbol\"][0]\n",
                "score_bin_index = modelpredictors.filter(pl.col(\"EntryType\") == \"Classifier\") [\"BinSymbol\"].to_list().index(score_bin)\n",
                "score_propensity = classifier.to_pandas().iloc[score_bin_index][\"Adjusted Propensity (%)\"]\n",
                "\n",
                "adjusted_propensity = (\n",
                "    modelpredictors.filter(pl.col(\"EntryType\") == \"Classifier\")\n",
                "    .with_columns(\n",
                "        AdjustedPropensity=((0.5 + BinPositives) / (1 + BinPositives + BinNegatives)),\n",
                "    )\n",
                "    .select(\n",
                "        pl.col(\"AdjustedPropensity\").where(\n",
                "            (pl.col(\"BinLowerBound\") < score) & (pl.col(\"BinUpperBound\") > score)\n",
                "        )\n",
                "    )[\"AdjustedPropensity\"][0]\n",
                "    * 100\n",
                ")\n",
                "adjusted_propensity = round(adjusted_propensity, 2)\n",
                "\n",
                "fig = ADMVisualisations.distribution_graph(\n",
                "    modelpredictors.filter(pl.col(\"EntryType\") == \"Classifier\"),\n",
                "    \"Propensity distribution\",\n",
                ").add_annotation(\n",
                "    x=score_bin,\n",
                "    # TODO: flex this\n",
                "    y=1400,\n",
                "    text=f\"Returned propensity: {score_propensity:.2f}%\",\n",
                "    bgcolor=\"#FFFFFF\",\n",
                "    bordercolor=\"#000000\",\n",
                "    showarrow=False,\n",
                ")\n",
                "bin_index = list(fig.data[0][\"x\"]).index(score_bin)\n",
                "fig.data[0][\"marker_color\"] = [\"grey\"] * bin_index + [\"#1f77b4\"] + [\"grey\"] * (classifier.shape[0] - bin_index - 1)\n",
                "fig"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "playground",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.10.4"
        },
        "orig_nbformat": 4
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
